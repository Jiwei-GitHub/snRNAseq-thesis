import numpy as np
import pandas as pd
import scanpy as sc
import anndata as ad
import os
import seaborn as sns
import scanpy.external as sce
import matplotlib.pyplot as plt
sc.set_figure_params(figsize=(4,4), dpi_save=600, dpi=300)


df_meta = pd.read_excel("df.meta.xlsx")
ids = df_meta['Sample_id'].to_list()
ids
adata_list = [None] * len(ids)
for i in range(len(ids)):
    id = ids[i]
    print(i)
    print(id)
    
    pa = "./all_filtered_matrix/"+id+"/filtered_cell_gene_matrix"
    meta_data = pd.read_csv(".//meta_data/"+id+"_meta_data.csv", index_col=0)
    adata = sc.read_10x_mtx(pa)
    adata = adata[adata.obs_names.isin(meta_data.Cell_id_original)]

    df_obs = adata.obs
    df_obs.reset_index(inplace=True)
    df_obs = df_obs.rename(columns = {'index':'Cell_id_original'})
    df_obs['Cell_id'] = id + "-" + df_obs.Cell_id_original
    df_obs=df_obs.drop(['Cell_id_original'], axis=1)
    df_obs = df_obs.set_index('Cell_id').join(meta_data.set_index('Cell_id'), how="left")
    adata.obs = df_obs

    adata_list[i] = adata
    del meta_data
    del df_obs
    del adata

adata = sc.concat(adata_list[0:len(adata_list)], join = "inner")

adata.write_h5ad("./pydata/raw.h5ad")



## adata.priamry.pipeline

adata = sc.read_h5ad("./pydata/raw.h5ad")
adata.raw = adata
sc.pp.filter_genes(adata, min_cells=10)



sc.pp.normalize_total(adata, target_sum=1e4)
sc.pp.log1p(adata)
sc.pp.highly_variable_genes(adata, flavor='seurat', n_top_genes = 5000, subset=False, inplace=True, batch_key='orig.ident')

sc.pp.regress_out(adata, ['nCount_RNA', 'MT_pct'])
sc.pp.scale(adata, max_value=10)
adata.write_h5ad("./pydata/03-ad-beforePCA.h5ad")

sc.tl.pca(adata, svd_solver='arpack')

## harmony
sce.pp.harmony_integrate(adata = adata, max_iter_harmony=100,
                         key = "orig.ident", 
                         basis='X_pca', adjusted_basis='X_pca_harmony')

## cluster+leiden+umap
sc.pp.neighbors(adata, n_neighbors=15, n_pcs=50, use_rep = "X_pca_harmony")
sc.tl.umap(adata, min_dist=0.3)
sc.tl.leiden(adata, resolution=0.05, key_added="leiden_0.05")
sc.tl.leiden(adata, resolution=0.1, key_added="leiden_0.1")
sc.tl.leiden(adata, resolution=0.2, key_added="leiden_0.2")
sc.tl.leiden(adata, resolution=0.4, key_added="leiden_0.4")
sc.tl.leiden(adata, resolution=0.6, key_added="leiden_0.6")
sc.tl.leiden(adata, resolution=0.8, key_added="leiden_0.8")

adata.write_h5ad("./pydata/03-ad.h5ad")

sc.pl.umap(adata, color=["leiden_0.05","leiden_0.1", "leiden_0.2",
                         "leiden_0.4" ,"leiden_0.6", "leiden_0.8",
                         'orig.ident', 'Tissue_Site','Sample_Type',
                         'MT_pct','Ribo_pct' ,'log2nCount'], 
           ncols=6, legend_loc = 'on data', 
           save="-primary.png",
           legend_fontsize=8, legend_fontoutline=True)
sc.pl.umap(adata, color=["leiden_0.05","leiden_0.1", "leiden_0.2",
                         "leiden_0.4" ,"leiden_0.6", "leiden_0.8",
                         'orig.ident', 'Tissue_Site','Sample_Type',
                         'MT_pct','Ribo_pct' ,'log2nCount'], 
           ncols=6, 
           # legend_loc = 'on data', 
           save="-primary-legend.png",
           legend_fontsize=8, legend_fontoutline=True)
           
           
           
     
## dotplot for markers_1-Adipose
c_marker = pd.read_excel('./Markers_new.xlsx', sheet_name='Adipose')
# intersection = set(adata.var_names,c_marker['gene_name'])
c_marker = c_marker[c_marker['gene_name'].isin(adata.raw.var_names)]

# markers_1 = pd.Series(c_marker['gene_name'].values, index = c_marker['Cell_type'].astype('str'))
markers_1 = c_marker.groupby('Cell_type').gene_name.agg(list).to_dict()
markers_1

sc.pl.dotplot(adata, markers_1, ['leiden_0.2'], use_raw=None, save='primary.adipose.marker-leiden_0.2.png')
sc.pl.dotplot(adata, markers_1, ['leiden_0.4'], use_raw=None, save='primary.adipose.marker-leiden_0.4.png')
sc.pl.dotplot(adata, markers_1, ['leiden_0.6'], use_raw=None, save='primary.adipose.marker-leiden_0.6.png')
sc.pl.dotplot(adata, markers_1, ['leiden_0.8'], use_raw=None, save='primary.adipose.marker-leiden_0.8.png')
# sc.pl.dotplot(adata, markers_1, ['leiden_0.2'], use_raw=True,save='primary.adipose.marker_useRaw.png')

## dotplot for markers_2
c_marker = pd.read_excel('./Markers_new.xlsx', sheet_name='Sheet2')
c_marker = c_marker[c_marker['gene_name'].isin(adata.raw.var_names)]
markers_2 = c_marker.groupby('Cell_type').gene_name.agg(list).to_dict()

sc.pl.dotplot(adata, markers_2, ['leiden_0.2'], use_raw=None, save='primary.adipose.marker_2-leiden_0.2.png')
sc.pl.dotplot(adata, markers_2, ['leiden_0.4'], use_raw=None, save='primary.adipose.marker_2-leiden_0.4.png')
sc.pl.dotplot(adata, markers_2, ['leiden_0.6'], use_raw=None, save='primary.adipose.marker_2-leiden_0.6.png')
sc.pl.dotplot(adata, markers_2, ['leiden_0.8'], use_raw=None, save='primary.adipose.marker_2-leiden_0.8.png')
# sc.pl.dotplot(adata, markers_2, ['leiden_0.2'], use_raw=True,save='primary.adipose.marker-2.useRaw.png')


c_marker = pd.read_excel('./Markers_new.xlsx', sheet_name='Adipose_1')
c_marker = c_marker[c_marker['gene_name'].isin(adata.raw.var_names)]
markers_3 = c_marker.groupby('Cell_type').gene_name.agg(list).to_dict()

sc.pl.dotplot(adata, markers_3, ['leiden_0.2'], use_raw=None, save='primary.adipose.marker_3-leiden_0.2.png')
sc.pl.dotplot(adata, markers_3, ['leiden_0.4'], use_raw=None, save='primary.adipose.marker_3-leiden_0.4.png')
sc.pl.dotplot(adata, markers_3, ['leiden_0.6'], use_raw=None, save='primary.adipose.marker_3-leiden_0.6.png')
sc.pl.dotplot(adata, markers_3, ['leiden_0.8'], use_raw=None, save='primary.adipose.marker_3-leiden_0.8.png')      
           
           
           
           
           
           
           
           
           



